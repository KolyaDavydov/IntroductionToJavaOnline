package algorithmization_2.arraysOfArrays;

import java.util.Arrays;

public class Task16 {

	public static void main(String[] args) {
		int order = 5;
		int[][] matrix = new int[order][order];
		if (order % 2 == 1) {
			matrix = squareOddOrder(order);
		} //для матриц с нечетным порядком с использованием сиамского метода заполнения.
		
		
		System.out.println("Matrix looks like:");
	    for(int i = 0; i < matrix.length; i++) {
			System.out.println(Arrays.toString(matrix[i]));
	    }
	    System.out.print("\nSum of columns elements: ");
	    for(int j = 0; j < order; j++) {
	    	int sum = 0;
	    	for(int i = 0; i < order; i++) {
	    		sum = sum + matrix[i][j];
	    	}
	    	System.out.print(sum + ", ");
	    }
	    System.out.print("\nSum of lines elements: ");
	    for(int i = 0; i < order; i++) {
	    	int sum = 0;
	    	for(int j = 0; j < order; j++) {
	    		sum = sum + matrix[i][j];
	    	}
	    	System.out.print(sum + ", ");
	    }
	    System.out.print("\nSum of main diagonals elements: ");
	    int sum = 0;
	    for(int i = 0; i < order; i++) {
	    	sum = sum + matrix[i][i];
	    }
	    System.out.print(sum + ", ");
	}
	public static int[][] squareOddOrder (int order) {
		int matrix[][] = new int[order][order];
		
		int y = 0;
		int x = matrix.length / 2;
		int count = 1;
        while (true){
            matrix[y][x] = count;

            count++;
            if (((y == 0) && (x >= order - 1)) && (matrix[order - 1][0] != 0)){
                y++;
            }
            else {
                y--;
                if (y < 0) {
                    y = order - 1;
                }
                x++;
                if (x == order) {
                    x = 0;
                }
                if(matrix[y][x]!=0){
                    y+=2;
                    x--;
                }
            }

            if(count == order * order + 1) {
            	break;
            }
        }
		return matrix;
	}
	
	
	
	

}
