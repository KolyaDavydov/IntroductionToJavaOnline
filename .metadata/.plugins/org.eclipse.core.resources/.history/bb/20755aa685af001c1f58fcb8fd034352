package algorithmization_2.arraysOfArrays;

import java.util.Arrays;

public class Task16 {

	public static void main(String[] args) {
		int order = 6;
		int[][] matrix = new int[order][order];
		if (order % 2 == 1) {
			matrix = squareOddOrder(order);
		} //для матриц с нечетным порядком с использованием сиамского метода заполнения.
		else if (order / 2 % 2 == 1) {
			matrix = squareOfEvenOddOrder(order);
		}
		
		System.out.println("Matrix looks like:");
	    for(int i = 0; i < matrix.length; i++) {
			System.out.println(Arrays.toString(matrix[i]));
	    }
	    System.out.print("\nSum of columns elements: ");
	    for(int j = 0; j < order; j++) {
	    	int sum = 0;
	    	for(int i = 0; i < order; i++) {
	    		sum = sum + matrix[i][j];
	    	}
	    	System.out.print(sum + ", ");
	    }
	    System.out.print("\nSum of lines elements: ");
	    for(int i = 0; i < order; i++) {
	    	int sum = 0;
	    	for(int j = 0; j < order; j++) {
	    		sum = sum + matrix[i][j];
	    	}
	    	System.out.print(sum + ", ");
	    }
	    System.out.print("\nSum of main diagonals elements: ");
	    int sumOfDiag = 0;
	    for(int i = 0; i < order; i++) {
	    	sumOfDiag = sumOfDiag + matrix[i][i];
	    }
	    System.out.print(sumOfDiag + ", ");
	    sumOfDiag = 0;
	    for(int i = 0; i < order; i++) {
	    	sumOfDiag = sumOfDiag + matrix[i][order - 1 - i];
	    }
	    System.out.print(sumOfDiag);
	}
	public static int[][] squareOddOrder (int order) {
		int matrix[][] = new int[order][order];
		
		int y = 0;
		int x = matrix.length / 2;
		int count = 1;
        while (true){
            matrix[y][x] = count;

            count++;
            if (((y == 0) && (x >= order - 1)) && (matrix[order - 1][0] != 0)){
                y++;
            }
            else {
                y--;
                if (y < 0) {
                    y = order - 1;
                }
                x++;
                if (x == order) {
                    x = 0;
                }
                if(matrix[y][x]!=0){
                    y+=2;
                    x--;
                }
            }

            if(count == order * order + 1) {
            	break;
            }
        }
		return matrix;
	}
	
	
	private static int[][] squareOfEvenOddOrder(int n) {
        // Метод "анонима" спасибо человеку, который его придумал
        // Вот ссылка на подробное описание метода http://www.klassikpoez.narod.ru/mojmetod.htm
        // Оставлю этот код без комментариев уж очень он большой
        // Надеюсь прочитав описание метода сможете понять(или нет?)
        int half = n/2;

        int[][] matrix = new int[n][n];
        int[][] tempMatrix;
        tempMatrix = squareOddOrder(half);

        // 1/4 матрицы
        for (int i = 0; i < half; i++) {
            for (int j = 0; j < half; j++) {
                matrix[i][j] = tempMatrix[i][j];
            }
        }
        // 2/4 матрицы
        for (int i = 0; i < half; i++) {
            for (int j = half; j < n; j++) {
                int x = j-half;
                matrix[i][j] = (tempMatrix[i][x]+2*half*half);
            }
        }
        // 3/4 матрицы
        for (int i = half; i < n; i++) {
            for (int j = 0; j < half; j++) {
                int x = i-half;

                matrix[i][j] = (tempMatrix[x][j]+3*half*half);
            }
        }
        // 4/4 матрицы
        for (int i = half; i < n; i++) {
            for (int j = half; j < n; j++) {
                int x = i-half, y = j-half;
                matrix[i][j] = (tempMatrix[x][y]+half*half);
            }
        }
        int move = 0;
        for (int i = 6; i < n; i++) {
            if((i%4!=0)&&(i%2==0)) move++;
        }
        for (int j = matrix.length/2-move; j <= matrix.length/2+move-1; j++) {
            for (int i = 0; i < tempMatrix.length; i++) {

                int key = matrix[i][j];
                matrix[i][j] = matrix[half+i][j];
                matrix[half+i][j] = key;
            }
        }
        for (int j = 0; j <= 1; j++) {
            if (j == 0) {
                int key = matrix[0][0];
                matrix[0][0] = matrix[half][0];
                matrix[half][0] = key;
            }
            if (j == 1) {
                int key = matrix[half - 1][0];
                matrix[half - 1][0] = matrix[n - 1][0];
                matrix[n - 1][0] = key;
            }
        }
        for (int j = half+1; j < n-1; j++) {
            for (int i = 1; i < half-1; i++) {
                int key = matrix[i][1];
                matrix[i][1] = matrix[half+i][1];
                matrix[half+i][1] = key;
            }
        }
        return matrix;
    }
	
	
	
	

}
